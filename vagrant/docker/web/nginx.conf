# daemon off;
user www-data;
worker_processes 1;  # must be number of cores at max. Do not use more as it will drag performance!
worker_priority  10; # be nice
pid /run/nginx.pid;
error_log /proc/self/fd/1 debug;

# must be equal or higher as 'worker_processes' * 'worker_connections'
worker_rlimit_nofile 1536;

events {
    worker_connections 768;
    use epoll;
    multi_accept on;
}

http {
    # don't send the web version number in error pages and Server header
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /proc/self/fd/1;

    # Basic fastcgi cache parameters.
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header updating http_500;
    fastcgi_cache_lock on;
    fastcgi_cache_lock_timeout 5s;
    fastcgi_cache_methods GET HEAD;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    # Timeouts, do not keep connections open longer then necessary to reduce
    # resource usage and deny Slowloris type attacks.
    client_body_timeout       3s; # maximum time between packets the client can pause when sending nginx any data
    client_header_timeout     3s; # maximum time the client has to send the entire header to nginx
    send_timeout              3s; # maximum time between packets nginx is allowed to pause when sending the client data
    keepalive_timeout         9s; # timeout which a single keep-alive client connection will stay open
    keepalive_requests        10;  # number of requests per connection, does not affect SPDY
    keepalive_disable         none; # allow all browsers to use keepalive connections

    # General options
    charset                   utf-8; # adds the line "Content-Type" into response-header, same as "source_charset"
    ignore_invalid_headers    on; # throws away non-standard headers in the client request
    max_ranges                0; # disabled to stop range header DoS attacks as resumed downloads are denied
    msie_padding              off;
    open_file_cache           max=200000 inactive=2m;
    open_file_cache_errors    on;
    open_file_cache_min_uses  2;
    open_file_cache_valid     1m;
    output_buffers            1 512;
    postpone_output           1440;   # postpone sends to match our machine's MSS
    read_ahead                512K;   # kernel read head set to the output_buffers
    recursive_error_pages     on;
    reset_timedout_connection on;  # reset timed out connections freeing ram
    sendfile                  on;  # on for decent direct disk I/O
    server_name_in_redirect   off; # if off, nginx will use the requested Host header
    source_charset            utf-8; # same value as "charset"
    tcp_nodelay               on; # Nagle buffering algorithm, used for keepalive only
    tcp_nopush                on; # Do not send out partial frames (latency improvements up to 100ms

    # GZip settings
    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_min_length 1100;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    server_names_hash_bucket_size 2048;
    variables_hash_max_size       2048;
    variables_hash_bucket_size    512;
    types_hash_max_size           2048;

    ## Size Limits
    client_body_buffer_size       8k;
    client_header_buffer_size     1k;
    client_max_body_size          10m;
    large_client_header_buffers   4 4k;

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    #
    # Only use if site is on no way used in an iFrame (like Google Analytics layovers)
    #
    # add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # Include other settings
    include /etc/nginx/conf.d/*.conf;

    # Include all sites in sites-enabled/ that end in *.conf
    include /etc/nginx/sites-enabled/*.conf;
}
